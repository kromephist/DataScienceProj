from genericpath import exists
import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
from sklearn.compose import ColumnTransformer
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
from sklearn.preprocessing import OneHotEncoder
from wordcloud import WordCloud
import seaborn as sns


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm

# Load the data and prepare it for Poisson regression
anime_df = pd.read_csv("anime.csv")
rating_df = pd.read_csv("rating.csv")
merged_df = pd.merge(anime_df, rating_df, on="anime_id", suffixes=("", "_user"))
cleaned_df = merged_df.dropna(subset=["rating_user"])
genre_df = cleaned_df.groupby("genre").agg({"rating_user": "mean", "members": "sum"}).reset_index()

# Perform Poisson regression on the data
X = genre_df["members"]
y = genre_df["rating_user"]
X = sm.add_constant(X)  # add a constant term to the predictor
model = sm.GLM(y, X, family=sm.families.Poisson())
results = model.fit()

# Create a scatter plot of the data
fig, ax = plt.subplots()
ax.scatter(X["members"], y, alpha=0.5)
ax.set_xlabel("Number of Members")
ax.set_ylabel("Mean Rating")
ax.set_title("Anime Genres by Mean Rating and Total Members")

# Create the Poisson regression line
x_vals = np.linspace(X[:,1].min(), X[:,1].max(), 100)
y_vals = results.predict(sm.add_constant(x_vals))
ax.plot(x_vals, y_vals, '--', color='r')
plt.show()
# Save the scatter plot
plt.savefig("cluster_scatter.png")

if not exists("wordcloud_genre_rating.png"):
    # Generate a wordcloud of the genres based on mean rating
    wordcloud = WordCloud(background_color="white").generate_from_frequencies(genre_df.set_index("genre")["rating_user"])
    plt.figure(figsize=(10, 8))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis("off")
    plt.title("Wordcloud of Anime Genres by Mean Rating")
    plt.savefig("wordcloud_genre_rating.png")
    print("Genre Wordclouds Generated by rating")

if not exists("wordcloud_genre_members.png"):
# Generate a wordcloud of the genres based on total members
    wordcloud = WordCloud(background_color="white").generate_from_frequencies(genre_df.set_index("genre")["members"])
    plt.figure(figsize=(10, 8))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis("off")
    plt.title("Wordcloud of Anime Genres by Total Members")
    plt.savefig("wordcloud_genre_members.png")
    print("Genre Wordclouds Generated by members")
    # create a dictionary of anime names and their corresponding number of members
    anime_dict = dict(zip(cleaned_df['name'], cleaned_df['members']))
if not exists("wordcloud_anime_members.png"):
    # create a word cloud from the anime dictionary
    wordcloud = WordCloud(width=800, height=800, background_color='white', max_words=50).generate_from_frequencies(anime_df)
    plt.figure(figsize=(8, 8))
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')
    plt.savefig('wordcloud_anime_members.png')
    print("Anime Wordcloud Generated")

#this will create and save a heatmap of the anime members and ratings and add explanatory labels
if not exists("anime_heatmap.png"):
    anime_members = cleaned_df.pivot_table(index='name', columns='rating_user', values='members')
    sns.heatmap(anime_members, cmap='Blues')

    plt.title('Anime Members by Rating')   

    plt.xlabel('Rating')

    plt.savefig('anime_heatmap.png')

    print("Anime Heatmap Generated")




